//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { DateTime, Duration } from "luxon";

export interface IFileClient {

    getLogFileInfos(projectName: string | null | undefined): Promise<LogFileInfo[]>;

    importAll(projectName: string | null | undefined): Promise<{ [key: string]: LogFileInfo; }>;

    importLog(projectName: string | null | undefined, fileName: string | null | undefined): Promise<LogFileInfo | null>;

    exportOcel(projectName: string | null | undefined, format: string | null | undefined): Promise<FileResponse | null>;
}

export class FileClient implements IFileClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getLogFileInfos(projectName: string | null | undefined): Promise<LogFileInfo[]> {
        let url_ = this.baseUrl + "/api/File/logFileInfos?";
        if (projectName !== undefined && projectName !== null)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLogFileInfos(_response);
        });
    }

    protected processGetLogFileInfos(response: Response): Promise<LogFileInfo[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LogFileInfo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LogFileInfo[]>(null as any);
    }

    importAll(projectName: string | null | undefined): Promise<{ [key: string]: LogFileInfo; }> {
        let url_ = this.baseUrl + "/api/File/importAll?";
        if (projectName !== undefined && projectName !== null)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImportAll(_response);
        });
    }

    protected processImportAll(response: Response): Promise<{ [key: string]: LogFileInfo; }> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)![key] = resultData200[key] ? LogFileInfo.fromJS(resultData200[key]) : new LogFileInfo();
                }
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<{ [key: string]: LogFileInfo; }>(null as any);
    }

    importLog(projectName: string | null | undefined, fileName: string | null | undefined): Promise<LogFileInfo | null> {
        let url_ = this.baseUrl + "/api/File/importLog?";
        if (projectName !== undefined && projectName !== null)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        if (fileName !== undefined && fileName !== null)
            url_ += "fileName=" + encodeURIComponent("" + fileName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImportLog(_response);
        });
    }

    protected processImportLog(response: Response): Promise<LogFileInfo | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LogFileInfo.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LogFileInfo | null>(null as any);
    }

    exportOcel(projectName: string | null | undefined, format: string | null | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/File/exportOcel?";
        if (projectName !== undefined && projectName !== null)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        if (format !== undefined && format !== null)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExportOcel(_response);
        });
    }

    protected processExportOcel(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }
}

export interface IMapClient {

    getLogInfo(projectName: string | null | undefined): Promise<LogInfo>;

    discoverObjectCentricDirectlyFollowsGraph(projectName: string | null | undefined, options: OcDfgOptions): Promise<DirectedGraphOfNodeAndEdge>;

    discoverOcDfgAndApplyStableGraphLayout(projectName: string | null | undefined, options: OcDfgLayoutOptions): Promise<GraphLayout>;

    discoverOcDfgAndGenerateDot(projectName: string | null | undefined, groupByNamespace: boolean | undefined, options: OcDfgOptions): Promise<string>;

    getNamespaceTree(projectName: string | null | undefined): Promise<ListTreeOfString>;
}

export class MapClient implements IMapClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getLogInfo(projectName: string | null | undefined): Promise<LogInfo> {
        let url_ = this.baseUrl + "/api/Map/getLogInfo?";
        if (projectName !== undefined && projectName !== null)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLogInfo(_response);
        });
    }

    protected processGetLogInfo(response: Response): Promise<LogInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LogInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LogInfo>(null as any);
    }

    discoverObjectCentricDirectlyFollowsGraph(projectName: string | null | undefined, options: OcDfgOptions): Promise<DirectedGraphOfNodeAndEdge> {
        let url_ = this.baseUrl + "/api/Map/discoverOcDfg?";
        if (projectName !== undefined && projectName !== null)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(options);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDiscoverObjectCentricDirectlyFollowsGraph(_response);
        });
    }

    protected processDiscoverObjectCentricDirectlyFollowsGraph(response: Response): Promise<DirectedGraphOfNodeAndEdge> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DirectedGraphOfNodeAndEdge.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DirectedGraphOfNodeAndEdge>(null as any);
    }

    discoverOcDfgAndApplyStableGraphLayout(projectName: string | null | undefined, options: OcDfgLayoutOptions): Promise<GraphLayout> {
        let url_ = this.baseUrl + "/api/Map/discoverOcDfgAndApplyStableGraphLayout?";
        if (projectName !== undefined && projectName !== null)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(options);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDiscoverOcDfgAndApplyStableGraphLayout(_response);
        });
    }

    protected processDiscoverOcDfgAndApplyStableGraphLayout(response: Response): Promise<GraphLayout> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GraphLayout.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GraphLayout>(null as any);
    }

    discoverOcDfgAndGenerateDot(projectName: string | null | undefined, groupByNamespace: boolean | undefined, options: OcDfgOptions): Promise<string> {
        let url_ = this.baseUrl + "/api/Map/discoverOcDfgAndDot?";
        if (projectName !== undefined && projectName !== null)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        if (groupByNamespace === null)
            throw new Error("The parameter 'groupByNamespace' cannot be null.");
        else if (groupByNamespace !== undefined)
            url_ += "groupByNamespace=" + encodeURIComponent("" + groupByNamespace) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(options);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDiscoverOcDfgAndGenerateDot(_response);
        });
    }

    protected processDiscoverOcDfgAndGenerateDot(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    getNamespaceTree(projectName: string | null | undefined): Promise<ListTreeOfString> {
        let url_ = this.baseUrl + "/api/Map/namespaceTree?";
        if (projectName !== undefined && projectName !== null)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetNamespaceTree(_response);
        });
    }

    protected processGetNamespaceTree(response: Response): Promise<ListTreeOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ListTreeOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ListTreeOfString>(null as any);
    }
}

export interface IProjectClient {

    create(name: string | null | undefined, logDir: string | null | undefined): Promise<void>;

    delete(name: string | null | undefined): Promise<void>;
}

export class ProjectClient implements IProjectClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    create(name: string | null | undefined, logDir: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Project/create?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (logDir !== undefined && logDir !== null)
            url_ += "logDir=" + encodeURIComponent("" + logDir) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    delete(name: string | null | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Project/delete?";
        if (name !== undefined && name !== null)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class LogFileInfo implements ILogFileInfo {
    id!: string;
    noOfImportedEvents!: number;
    noOfImportedObjects!: number;
    fileSize!: number;
    lastImported?: DateTime | undefined;
    lastChanged?: DateTime | undefined;

    constructor(data?: ILogFileInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.noOfImportedEvents = _data["noOfImportedEvents"];
            this.noOfImportedObjects = _data["noOfImportedObjects"];
            this.fileSize = _data["fileSize"];
            this.lastImported = _data["lastImported"] ? DateTime.fromISO(_data["lastImported"].toString()) : <any>undefined;
            this.lastChanged = _data["lastChanged"] ? DateTime.fromISO(_data["lastChanged"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): LogFileInfo {
        data = typeof data === 'object' ? data : {};
        let result = new LogFileInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["noOfImportedEvents"] = this.noOfImportedEvents;
        data["noOfImportedObjects"] = this.noOfImportedObjects;
        data["fileSize"] = this.fileSize;
        data["lastImported"] = this.lastImported ? this.lastImported.toString() : <any>undefined;
        data["lastChanged"] = this.lastChanged ? this.lastChanged.toString() : <any>undefined;
        return data;
    }
}

export interface ILogFileInfo {
    id: string;
    noOfImportedEvents: number;
    noOfImportedObjects: number;
    fileSize: number;
    lastImported?: DateTime | undefined;
    lastChanged?: DateTime | undefined;
}

export class LogInfo implements ILogInfo {
    objectTypes!: string[];

    constructor(data?: ILogInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.objectTypes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["objectTypes"])) {
                this.objectTypes = [] as any;
                for (let item of _data["objectTypes"])
                    this.objectTypes!.push(item);
            }
        }
    }

    static fromJS(data: any): LogInfo {
        data = typeof data === 'object' ? data : {};
        let result = new LogInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.objectTypes)) {
            data["objectTypes"] = [];
            for (let item of this.objectTypes)
                data["objectTypes"].push(item);
        }
        return data;
    }
}

export interface ILogInfo {
    objectTypes: string[];
}

export class DirectedGraphOfNodeAndEdge implements IDirectedGraphOfNodeAndEdge {
    nodes!: Node[];
    edges!: ValueTupleOfNodeAndNodeAndEdge[];

    constructor(data?: IDirectedGraphOfNodeAndEdge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.nodes = [];
            this.edges = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(Node.fromJS(item));
            }
            if (Array.isArray(_data["edges"])) {
                this.edges = [] as any;
                for (let item of _data["edges"])
                    this.edges!.push(ValueTupleOfNodeAndNodeAndEdge.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DirectedGraphOfNodeAndEdge {
        data = typeof data === 'object' ? data : {};
        let result = new DirectedGraphOfNodeAndEdge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        if (Array.isArray(this.edges)) {
            data["edges"] = [];
            for (let item of this.edges)
                data["edges"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDirectedGraphOfNodeAndEdge {
    nodes: Node[];
    edges: ValueTupleOfNodeAndNodeAndEdge[];
}

export abstract class Node implements INode {
    coordinate?: Coordinate | undefined;

    protected _discriminator: string;

    constructor(data?: INode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "Node";
    }

    init(_data?: any) {
        if (_data) {
            this.coordinate = _data["coordinate"] ? Coordinate.fromJS(_data["coordinate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Node {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "StartNode") {
            let result = new StartNode();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "EndNode") {
            let result = new EndNode();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "EventNode") {
            let result = new EventNode();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'Node' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        data["coordinate"] = this.coordinate ? this.coordinate.toJSON() : <any>undefined;
        return data;
    }
}

export interface INode {
    coordinate?: Coordinate | undefined;
}

/** A point in a coordinate system */
export class Coordinate implements ICoordinate {
    x!: number;
    y!: number;

    constructor(data?: ICoordinate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.x = _data["x"];
            this.y = _data["y"];
        }
    }

    static fromJS(data: any): Coordinate {
        data = typeof data === 'object' ? data : {};
        let result = new Coordinate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x;
        data["y"] = this.y;
        return data;
    }
}

/** A point in a coordinate system */
export interface ICoordinate {
    x: number;
    y: number;
}

export class StartNode extends Node implements IStartNode {
    type!: string;

    constructor(data?: IStartNode) {
        super(data);
        this._discriminator = "StartNode";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.type = _data["type"];
        }
    }

    static override fromJS(data: any): StartNode {
        data = typeof data === 'object' ? data : {};
        let result = new StartNode();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface IStartNode extends INode {
    type: string;
}

export class EndNode extends Node implements IEndNode {
    type!: string;

    constructor(data?: IEndNode) {
        super(data);
        this._discriminator = "EndNode";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.type = _data["type"];
        }
    }

    static override fromJS(data: any): EndNode {
        data = typeof data === 'object' ? data : {};
        let result = new EndNode();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        super.toJSON(data);
        return data;
    }
}

export interface IEndNode extends INode {
    type: string;
}

export class EventNode extends Node implements IEventNode {
    name!: string;
    level!: LogLevel;
    namespace!: string;
    statistics!: NodeStatistics;

    constructor(data?: IEventNode) {
        super(data);
        if (!data) {
            this.statistics = new NodeStatistics();
        }
        this._discriminator = "EventNode";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.name = _data["name"];
            this.level = _data["level"];
            this.namespace = _data["namespace"];
            this.statistics = _data["statistics"] ? NodeStatistics.fromJS(_data["statistics"]) : new NodeStatistics();
        }
    }

    static override fromJS(data: any): EventNode {
        data = typeof data === 'object' ? data : {};
        let result = new EventNode();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["level"] = this.level;
        data["namespace"] = this.namespace;
        data["statistics"] = this.statistics ? this.statistics.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IEventNode extends INode {
    name: string;
    level: LogLevel;
    namespace: string;
    statistics: NodeStatistics;
}

export enum LogLevel {
    Verbose = 0,
    Debug = 1,
    Information = 2,
    Warning = 3,
    Error = 4,
    Fatal = 5,
    Unknown = 6,
}

export class NodeStatistics implements INodeStatistics {
    frequency!: number;

    constructor(data?: INodeStatistics) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.frequency = _data["frequency"];
        }
    }

    static fromJS(data: any): NodeStatistics {
        data = typeof data === 'object' ? data : {};
        let result = new NodeStatistics();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frequency"] = this.frequency;
        return data;
    }
}

export interface INodeStatistics {
    frequency: number;
}

export class ValueTupleOfNodeAndNodeAndEdge implements IValueTupleOfNodeAndNodeAndEdge {
    item1!: Node;
    item2!: Node;
    item3!: Edge;

    constructor(data?: IValueTupleOfNodeAndNodeAndEdge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.item3 = new Edge();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"] ? Node.fromJS(_data["item1"]) : <any>undefined;
            this.item2 = _data["item2"] ? Node.fromJS(_data["item2"]) : <any>undefined;
            this.item3 = _data["item3"] ? Edge.fromJS(_data["item3"]) : new Edge();
        }
    }

    static fromJS(data: any): ValueTupleOfNodeAndNodeAndEdge {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfNodeAndNodeAndEdge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        data["item3"] = this.item3 ? this.item3.toJSON() : <any>undefined;
        return data;
    }
}

export interface IValueTupleOfNodeAndNodeAndEdge {
    item1: Node;
    item2: Node;
    item3: Edge;
}

export class Edge implements IEdge {
    type!: string;
    statistics!: EdgeStatistics;
    waypoints!: Coordinate[];

    constructor(data?: IEdge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.statistics = new EdgeStatistics();
            this.waypoints = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.statistics = _data["statistics"] ? EdgeStatistics.fromJS(_data["statistics"]) : new EdgeStatistics();
            if (Array.isArray(_data["waypoints"])) {
                this.waypoints = [] as any;
                for (let item of _data["waypoints"])
                    this.waypoints!.push(Coordinate.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Edge {
        data = typeof data === 'object' ? data : {};
        let result = new Edge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["statistics"] = this.statistics ? this.statistics.toJSON() : <any>undefined;
        if (Array.isArray(this.waypoints)) {
            data["waypoints"] = [];
            for (let item of this.waypoints)
                data["waypoints"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEdge {
    type: string;
    statistics: EdgeStatistics;
    waypoints: Coordinate[];
}

export class EdgeStatistics implements IEdgeStatistics {
    frequency!: number;

    constructor(data?: IEdgeStatistics) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.frequency = _data["frequency"];
        }
    }

    static fromJS(data: any): EdgeStatistics {
        data = typeof data === 'object' ? data : {};
        let result = new EdgeStatistics();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frequency"] = this.frequency;
        return data;
    }
}

export interface IEdgeStatistics {
    frequency: number;
}

export class OcDfgOptions implements IOcDfgOptions {
    minimumEvents!: number;
    minimumOccurrence!: number;
    minimumSuccessions!: number;
    includedTypes!: string[];

    constructor(data?: IOcDfgOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.includedTypes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.minimumEvents = _data["minimumEvents"];
            this.minimumOccurrence = _data["minimumOccurrence"];
            this.minimumSuccessions = _data["minimumSuccessions"];
            if (Array.isArray(_data["includedTypes"])) {
                this.includedTypes = [] as any;
                for (let item of _data["includedTypes"])
                    this.includedTypes!.push(item);
            }
        }
    }

    static fromJS(data: any): OcDfgOptions {
        data = typeof data === 'object' ? data : {};
        let result = new OcDfgOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minimumEvents"] = this.minimumEvents;
        data["minimumOccurrence"] = this.minimumOccurrence;
        data["minimumSuccessions"] = this.minimumSuccessions;
        if (Array.isArray(this.includedTypes)) {
            data["includedTypes"] = [];
            for (let item of this.includedTypes)
                data["includedTypes"].push(item);
        }
        return data;
    }
}

export interface IOcDfgOptions {
    minimumEvents: number;
    minimumOccurrence: number;
    minimumSuccessions: number;
    includedTypes: string[];
}

/** A global order defines a collection of nodes and their position, as well as paths between nodes where non-straight edges are required. */
export class GraphLayout implements IGraphLayout {
    nodes?: Node2[] | undefined;
    edges?: Connection[] | undefined;
    edgePaths?: EdgePath[] | undefined;

    constructor(data?: IGraphLayout) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(Node2.fromJS(item));
            }
            if (Array.isArray(_data["edges"])) {
                this.edges = [] as any;
                for (let item of _data["edges"])
                    this.edges!.push(Connection.fromJS(item));
            }
            if (Array.isArray(_data["edgePaths"])) {
                this.edgePaths = [] as any;
                for (let item of _data["edgePaths"])
                    this.edgePaths!.push(EdgePath.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GraphLayout {
        data = typeof data === 'object' ? data : {};
        let result = new GraphLayout();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        if (Array.isArray(this.edges)) {
            data["edges"] = [];
            for (let item of this.edges)
                data["edges"].push(item.toJSON());
        }
        if (Array.isArray(this.edgePaths)) {
            data["edgePaths"] = [];
            for (let item of this.edgePaths)
                data["edgePaths"].push(item.toJSON());
        }
        return data;
    }
}

/** A global order defines a collection of nodes and their position, as well as paths between nodes where non-straight edges are required. */
export interface IGraphLayout {
    nodes?: Node2[] | undefined;
    edges?: Connection[] | undefined;
    edgePaths?: EdgePath[] | undefined;
}

/** A node within a directed graph that has an associated name and X,Y position (origin in top-left). */
export class Node2 implements INode2 {
    id?: string | undefined;
    text?: string[] | undefined;
    type?: string | undefined;
    position?: Coordinate | undefined;
    size?: Size | undefined;
    rank!: number;

    constructor(data?: INode2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["text"])) {
                this.text = [] as any;
                for (let item of _data["text"])
                    this.text!.push(item);
            }
            this.type = _data["type"];
            this.position = _data["position"] ? Coordinate.fromJS(_data["position"]) : <any>undefined;
            this.size = _data["size"] ? Size.fromJS(_data["size"]) : <any>undefined;
            this.rank = _data["rank"];
        }
    }

    static fromJS(data: any): Node2 {
        data = typeof data === 'object' ? data : {};
        let result = new Node2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.text)) {
            data["text"] = [];
            for (let item of this.text)
                data["text"].push(item);
        }
        data["type"] = this.type;
        data["position"] = this.position ? this.position.toJSON() : <any>undefined;
        data["size"] = this.size ? this.size.toJSON() : <any>undefined;
        data["rank"] = this.rank;
        return data;
    }
}

/** A node within a directed graph that has an associated name and X,Y position (origin in top-left). */
export interface INode2 {
    id?: string | undefined;
    text?: string[] | undefined;
    type?: string | undefined;
    position?: Coordinate | undefined;
    size?: Size | undefined;
    rank: number;
}

export class Size implements ISize {
    width!: number;
    height!: number;

    constructor(data?: ISize) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.width = _data["width"];
            this.height = _data["height"];
        }
    }

    static fromJS(data: any): Size {
        data = typeof data === 'object' ? data : {};
        let result = new Size();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["width"] = this.width;
        data["height"] = this.height;
        return data;
    }
}

export interface ISize {
    width: number;
    height: number;
}

export class Connection implements IConnection {
    a?: string | undefined;
    b?: string | undefined;
    weight!: number;

    constructor(data?: IConnection) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.a = _data["a"];
            this.b = _data["b"];
            this.weight = _data["weight"];
        }
    }

    static fromJS(data: any): Connection {
        data = typeof data === 'object' ? data : {};
        let result = new Connection();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["a"] = this.a;
        data["b"] = this.b;
        data["weight"] = this.weight;
        return data;
    }
}

export interface IConnection {
    a?: string | undefined;
    b?: string | undefined;
    weight: number;
}

/** A path between two nodes with several waypoints which the edge should go through. */
export class EdgePath implements IEdgePath {
    edge?: TupleOfStringAndString | undefined;
    waypoints?: Coordinate[] | undefined;
    downwards!: boolean;

    constructor(data?: IEdgePath) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.edge = _data["edge"] ? TupleOfStringAndString.fromJS(_data["edge"]) : <any>undefined;
            if (Array.isArray(_data["waypoints"])) {
                this.waypoints = [] as any;
                for (let item of _data["waypoints"])
                    this.waypoints!.push(Coordinate.fromJS(item));
            }
            this.downwards = _data["downwards"];
        }
    }

    static fromJS(data: any): EdgePath {
        data = typeof data === 'object' ? data : {};
        let result = new EdgePath();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["edge"] = this.edge ? this.edge.toJSON() : <any>undefined;
        if (Array.isArray(this.waypoints)) {
            data["waypoints"] = [];
            for (let item of this.waypoints)
                data["waypoints"].push(item.toJSON());
        }
        data["downwards"] = this.downwards;
        return data;
    }
}

/** A path between two nodes with several waypoints which the edge should go through. */
export interface IEdgePath {
    edge?: TupleOfStringAndString | undefined;
    waypoints?: Coordinate[] | undefined;
    downwards: boolean;
}

export class TupleOfStringAndString implements ITupleOfStringAndString {
    item1!: string;
    item2!: string;

    constructor(data?: ITupleOfStringAndString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"];
            this.item2 = _data["item2"];
        }
    }

    static fromJS(data: any): TupleOfStringAndString {
        data = typeof data === 'object' ? data : {};
        let result = new TupleOfStringAndString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2;
        return data;
    }
}

export interface ITupleOfStringAndString {
    item1: string;
    item2: string;
}

export class OcDfgLayoutOptions implements IOcDfgLayoutOptions {
    ocDfgOptions!: OcDfgOptions;
    layoutOptions!: GraphLayoutOptions;

    constructor(data?: IOcDfgLayoutOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ocDfgOptions = new OcDfgOptions();
            this.layoutOptions = new GraphLayoutOptions();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ocDfgOptions = _data["ocDfgOptions"] ? OcDfgOptions.fromJS(_data["ocDfgOptions"]) : new OcDfgOptions();
            this.layoutOptions = _data["layoutOptions"] ? GraphLayoutOptions.fromJS(_data["layoutOptions"]) : new GraphLayoutOptions();
        }
    }

    static fromJS(data: any): OcDfgLayoutOptions {
        data = typeof data === 'object' ? data : {};
        let result = new OcDfgLayoutOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ocDfgOptions"] = this.ocDfgOptions ? this.ocDfgOptions.toJSON() : <any>undefined;
        data["layoutOptions"] = this.layoutOptions ? this.layoutOptions.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOcDfgLayoutOptions {
    ocDfgOptions: OcDfgOptions;
    layoutOptions: GraphLayoutOptions;
}

export class GraphLayoutOptions implements IGraphLayoutOptions {
    mergeEdgesOfSameType!: boolean;
    maxCharsPerLine!: number;
    nodeSeparation!: number;
    rankSeparation!: number;
    edgeSeparation!: number;

    constructor(data?: IGraphLayoutOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mergeEdgesOfSameType = _data["mergeEdgesOfSameType"];
            this.maxCharsPerLine = _data["maxCharsPerLine"];
            this.nodeSeparation = _data["nodeSeparation"];
            this.rankSeparation = _data["rankSeparation"];
            this.edgeSeparation = _data["edgeSeparation"];
        }
    }

    static fromJS(data: any): GraphLayoutOptions {
        data = typeof data === 'object' ? data : {};
        let result = new GraphLayoutOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mergeEdgesOfSameType"] = this.mergeEdgesOfSameType;
        data["maxCharsPerLine"] = this.maxCharsPerLine;
        data["nodeSeparation"] = this.nodeSeparation;
        data["rankSeparation"] = this.rankSeparation;
        data["edgeSeparation"] = this.edgeSeparation;
        return data;
    }
}

export interface IGraphLayoutOptions {
    mergeEdgesOfSameType: boolean;
    maxCharsPerLine: number;
    nodeSeparation: number;
    rankSeparation: number;
    edgeSeparation: number;
}

export class ListTreeOfString implements IListTreeOfString {

    constructor(data?: IListTreeOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ListTreeOfString {
        data = typeof data === 'object' ? data : {};
        let result = new ListTreeOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IListTreeOfString {
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}