//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.19.0.0 (NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export interface IFileClient {

    getLogFileInfos(projectName: string | undefined): Promise<LogFileInfo[]>;

    importAll(projectName: string | undefined): Promise<{ [key: string]: LogFileInfo; }>;

    importLog(projectName: string | undefined, fileName: string | undefined): Promise<LogFileInfo | null>;

    exportOcel(projectName: string | undefined, format: string | undefined): Promise<FileResponse | null>;
}

export class FileClient implements IFileClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getLogFileInfos(projectName: string | undefined): Promise<LogFileInfo[]> {
        let url_ = this.baseUrl + "/api/File/logFileInfos?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLogFileInfos(_response);
        });
    }

    protected processGetLogFileInfos(response: Response): Promise<LogFileInfo[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LogFileInfo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LogFileInfo[]>(null as any);
    }

    importAll(projectName: string | undefined): Promise<{ [key: string]: LogFileInfo; }> {
        let url_ = this.baseUrl + "/api/File/importAll?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImportAll(_response);
        });
    }

    protected processImportAll(response: Response): Promise<{ [key: string]: LogFileInfo; }> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200) {
                result200 = {} as any;
                for (let key in resultData200) {
                    if (resultData200.hasOwnProperty(key))
                        (<any>result200)![key] = resultData200[key] ? LogFileInfo.fromJS(resultData200[key]) : new LogFileInfo();
                }
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<{ [key: string]: LogFileInfo; }>(null as any);
    }

    importLog(projectName: string | undefined, fileName: string | undefined): Promise<LogFileInfo | null> {
        let url_ = this.baseUrl + "/api/File/importLog?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        if (fileName === null)
            throw new Error("The parameter 'fileName' cannot be null.");
        else if (fileName !== undefined)
            url_ += "fileName=" + encodeURIComponent("" + fileName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "POST",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processImportLog(_response);
        });
    }

    protected processImportLog(response: Response): Promise<LogFileInfo | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? LogFileInfo.fromJS(resultData200) : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LogFileInfo | null>(null as any);
    }

    exportOcel(projectName: string | undefined, format: string | undefined): Promise<FileResponse | null> {
        let url_ = this.baseUrl + "/api/File/exportOcel?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        if (format === null)
            throw new Error("The parameter 'format' cannot be null.");
        else if (format !== undefined)
            url_ += "format=" + encodeURIComponent("" + format) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processExportOcel(_response);
        });
    }

    protected processExportOcel(response: Response): Promise<FileResponse | null> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse | null>(null as any);
    }
}

export interface IMapClient {

    getLogInfo(projectName: string | undefined): Promise<LogInfo>;

    getAllNodesInLog(projectName: string | undefined): Promise<LogNode[]>;

    saveNodeCalculations(projectName: string | undefined, calculations: NodeCalculation[]): Promise<void>;

    computeLayoutWithModel(projectName: string | undefined, modelAndOptions: ValueTupleOfDirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfoAndGraphLayoutOptions): Promise<GraphLayout>;

    computeLayout(projectName: string | undefined, options: OcDfgLayoutOptions): Promise<GraphLayout>;

    discoverOcDfg(projectName: string | undefined, options: OcDfgOptions): Promise<GraphLayout>;

    discoverOcDfgAndGenerateDot(projectName: string | undefined, groupByNamespace: boolean | undefined, options: OcDfgOptions): Promise<string>;

    getTracesForObjectType(projectName: string | undefined, objectType: string | undefined): Promise<ValueTupleOfOcelObjectAndIEnumerableOfValueTupleOfStringAndOcelEvent[]>;

    /**
     * @param projectName (optional) 
     * @deprecated
     */
    getNamespaceTree(projectName: string | undefined): Promise<ListTreeOfString>;
}

export class MapClient implements IMapClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getLogInfo(projectName: string | undefined): Promise<LogInfo> {
        let url_ = this.baseUrl + "/api/Map/getLogInfo?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetLogInfo(_response);
        });
    }

    protected processGetLogInfo(response: Response): Promise<LogInfo> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = LogInfo.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LogInfo>(null as any);
    }

    getAllNodesInLog(projectName: string | undefined): Promise<LogNode[]> {
        let url_ = this.baseUrl + "/api/Map/getAllNodesInLog?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllNodesInLog(_response);
        });
    }

    protected processGetAllNodesInLog(response: Response): Promise<LogNode[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(LogNode.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<LogNode[]>(null as any);
    }

    saveNodeCalculations(projectName: string | undefined, calculations: NodeCalculation[]): Promise<void> {
        let url_ = this.baseUrl + "/api/Map/saveNodeCalculations?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(calculations);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSaveNodeCalculations(_response);
        });
    }

    protected processSaveNodeCalculations(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    computeLayoutWithModel(projectName: string | undefined, modelAndOptions: ValueTupleOfDirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfoAndGraphLayoutOptions): Promise<GraphLayout> {
        let url_ = this.baseUrl + "/api/Map/computeLayoutWithModel?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(modelAndOptions);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processComputeLayoutWithModel(_response);
        });
    }

    protected processComputeLayoutWithModel(response: Response): Promise<GraphLayout> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GraphLayout.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GraphLayout>(null as any);
    }

    computeLayout(projectName: string | undefined, options: OcDfgLayoutOptions): Promise<GraphLayout> {
        let url_ = this.baseUrl + "/api/Map/computeLayout?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(options);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processComputeLayout(_response);
        });
    }

    protected processComputeLayout(response: Response): Promise<GraphLayout> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GraphLayout.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GraphLayout>(null as any);
    }

    discoverOcDfg(projectName: string | undefined, options: OcDfgOptions): Promise<GraphLayout> {
        let url_ = this.baseUrl + "/api/Map/discoverOcDfg?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(options);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDiscoverOcDfg(_response);
        });
    }

    protected processDiscoverOcDfg(response: Response): Promise<GraphLayout> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GraphLayout.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GraphLayout>(null as any);
    }

    discoverOcDfgAndGenerateDot(projectName: string | undefined, groupByNamespace: boolean | undefined, options: OcDfgOptions): Promise<string> {
        let url_ = this.baseUrl + "/api/Map/discoverOcDfgAndDot?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        if (groupByNamespace === null)
            throw new Error("The parameter 'groupByNamespace' cannot be null.");
        else if (groupByNamespace !== undefined)
            url_ += "groupByNamespace=" + encodeURIComponent("" + groupByNamespace) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(options);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDiscoverOcDfgAndGenerateDot(_response);
        });
    }

    protected processDiscoverOcDfgAndGenerateDot(response: Response): Promise<string> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = resultData200 !== undefined ? resultData200 : <any>null;
    
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<string>(null as any);
    }

    getTracesForObjectType(projectName: string | undefined, objectType: string | undefined): Promise<ValueTupleOfOcelObjectAndIEnumerableOfValueTupleOfStringAndOcelEvent[]> {
        let url_ = this.baseUrl + "/api/Map/getTracesForObjectType?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        if (objectType === null)
            throw new Error("The parameter 'objectType' cannot be null.");
        else if (objectType !== undefined)
            url_ += "objectType=" + encodeURIComponent("" + objectType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTracesForObjectType(_response);
        });
    }

    protected processGetTracesForObjectType(response: Response): Promise<ValueTupleOfOcelObjectAndIEnumerableOfValueTupleOfStringAndOcelEvent[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ValueTupleOfOcelObjectAndIEnumerableOfValueTupleOfStringAndOcelEvent.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ValueTupleOfOcelObjectAndIEnumerableOfValueTupleOfStringAndOcelEvent[]>(null as any);
    }

    /**
     * @param projectName (optional) 
     * @deprecated
     */
    getNamespaceTree(projectName: string | undefined): Promise<ListTreeOfString> {
        let url_ = this.baseUrl + "/api/Map/namespaceTree?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetNamespaceTree(_response);
        });
    }

    protected processGetNamespaceTree(response: Response): Promise<ListTreeOfString> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ListTreeOfString.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ListTreeOfString>(null as any);
    }
}

export interface IObjectsClient {

    getObjectTypeInfos(projectName: string | undefined): Promise<ObjectInfo[]>;

    convertObjectsToAttributes(projectName: string | undefined, objectTypes: string[]): Promise<void>;
}

export class ObjectsClient implements IObjectsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    getObjectTypeInfos(projectName: string | undefined): Promise<ObjectInfo[]> {
        let url_ = this.baseUrl + "/api/Objects/getObjectTypeInfos?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetObjectTypeInfos(_response);
        });
    }

    protected processGetObjectTypeInfos(response: Response): Promise<ObjectInfo[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(ObjectInfo.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<ObjectInfo[]>(null as any);
    }

    convertObjectsToAttributes(projectName: string | undefined, objectTypes: string[]): Promise<void> {
        let url_ = this.baseUrl + "/api/Objects/convertObjectsToAttributes?";
        if (projectName === null)
            throw new Error("The parameter 'projectName' cannot be null.");
        else if (projectName !== undefined)
            url_ += "projectName=" + encodeURIComponent("" + projectName) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(objectTypes);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processConvertObjectsToAttributes(_response);
        });
    }

    protected processConvertObjectsToAttributes(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export interface IProjectClient {

    create(name: string | undefined, logDir: string | undefined): Promise<void>;

    delete(name: string | undefined): Promise<void>;
}

export class ProjectClient implements IProjectClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "";
    }

    create(name: string | undefined, logDir: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Project/create?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (logDir === null)
            throw new Error("The parameter 'logDir' cannot be null.");
        else if (logDir !== undefined)
            url_ += "logDir=" + encodeURIComponent("" + logDir) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreate(_response);
        });
    }

    protected processCreate(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    delete(name: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/Project/delete?";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDelete(_response);
        });
    }

    protected processDelete(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class LogFileInfo implements ILogFileInfo {
    id!: string;
    noOfImportedEvents!: number;
    noOfImportedObjects!: number;
    fileSize!: number;
    lastImported?: Date | undefined;
    lastChanged?: Date | undefined;

    constructor(data?: ILogFileInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.noOfImportedEvents = _data["noOfImportedEvents"];
            this.noOfImportedObjects = _data["noOfImportedObjects"];
            this.fileSize = _data["fileSize"];
            this.lastImported = _data["lastImported"] ? new Date(_data["lastImported"].toString()) : <any>undefined;
            this.lastChanged = _data["lastChanged"] ? new Date(_data["lastChanged"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): LogFileInfo {
        data = typeof data === 'object' ? data : {};
        let result = new LogFileInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["noOfImportedEvents"] = this.noOfImportedEvents;
        data["noOfImportedObjects"] = this.noOfImportedObjects;
        data["fileSize"] = this.fileSize;
        data["lastImported"] = this.lastImported ? this.lastImported.toISOString() : <any>undefined;
        data["lastChanged"] = this.lastChanged ? this.lastChanged.toISOString() : <any>undefined;
        return data;
    }
}

export interface ILogFileInfo {
    id: string;
    noOfImportedEvents: number;
    noOfImportedObjects: number;
    fileSize: number;
    lastImported?: Date | undefined;
    lastChanged?: Date | undefined;
}

export class LogInfo implements ILogInfo {
    objectTypes!: string[];
    firstEventTimestamp!: string;
    lastEventTimestamp!: string;

    constructor(data?: ILogInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.objectTypes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["objectTypes"])) {
                this.objectTypes = [] as any;
                for (let item of _data["objectTypes"])
                    this.objectTypes!.push(item);
            }
            this.firstEventTimestamp = _data["firstEventTimestamp"];
            this.lastEventTimestamp = _data["lastEventTimestamp"];
        }
    }

    static fromJS(data: any): LogInfo {
        data = typeof data === 'object' ? data : {};
        let result = new LogInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.objectTypes)) {
            data["objectTypes"] = [];
            for (let item of this.objectTypes)
                data["objectTypes"].push(item);
        }
        data["firstEventTimestamp"] = this.firstEventTimestamp;
        data["lastEventTimestamp"] = this.lastEventTimestamp;
        return data;
    }
}

export interface ILogInfo {
    objectTypes: string[];
    firstEventTimestamp: string;
    lastEventTimestamp: string;
}

export class LogNode implements ILogNode {
    id!: string;
    displayName!: string;
    nodeType!: NodeType;

    constructor(data?: ILogNode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.displayName = _data["displayName"];
            this.nodeType = _data["nodeType"] ? NodeType.fromJS(_data["nodeType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): LogNode {
        data = typeof data === 'object' ? data : {};
        let result = new LogNode();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["displayName"] = this.displayName;
        data["nodeType"] = this.nodeType ? this.nodeType.toJSON() : <any>undefined;
        return data;
    }
}

export interface ILogNode {
    id: string;
    displayName: string;
    nodeType: NodeType;
}

export abstract class NodeType implements INodeType {

    protected _discriminator: string;

    constructor(data?: INodeType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "NodeType";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): NodeType {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "Event") {
            let result = new Event();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "Start") {
            let result = new Start();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "End") {
            let result = new End();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'NodeType' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        return data;
    }
}

export interface INodeType {
}

export class Event extends NodeType implements IEvent {

    constructor(data?: IEvent) {
        super(data);
        this._discriminator = "Event";
    }

    override init(_data?: any) {
        super.init(_data);
    }

    static override fromJS(data: any): Event {
        data = typeof data === 'object' ? data : {};
        let result = new Event();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        super.toJSON(data);
        return data;
    }
}

export interface IEvent extends INodeType {
}

export class Start extends NodeType implements IStart {
    objectType!: string;

    constructor(data?: IStart) {
        super(data);
        this._discriminator = "Start";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.objectType = _data["objectType"];
        }
    }

    static override fromJS(data: any): Start {
        data = typeof data === 'object' ? data : {};
        let result = new Start();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["objectType"] = this.objectType;
        super.toJSON(data);
        return data;
    }
}

export interface IStart extends INodeType {
    objectType: string;
}

export class End extends NodeType implements IEnd {
    objectType!: string;

    constructor(data?: IEnd) {
        super(data);
        this._discriminator = "End";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.objectType = _data["objectType"];
        }
    }

    static override fromJS(data: any): End {
        data = typeof data === 'object' ? data : {};
        let result = new End();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["objectType"] = this.objectType;
        super.toJSON(data);
        return data;
    }
}

export interface IEnd extends INodeType {
    objectType: string;
}

export class NodeCalculation implements INodeCalculation {
    nodeId!: string;
    textWrap!: string[];
    size?: Size | undefined;
    nodeType?: NodeType | undefined;

    constructor(data?: INodeCalculation) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.textWrap = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.nodeId = _data["nodeId"];
            if (Array.isArray(_data["textWrap"])) {
                this.textWrap = [] as any;
                for (let item of _data["textWrap"])
                    this.textWrap!.push(item);
            }
            this.size = _data["size"] ? Size.fromJS(_data["size"]) : <any>undefined;
            this.nodeType = _data["nodeType"] ? NodeType.fromJS(_data["nodeType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): NodeCalculation {
        data = typeof data === 'object' ? data : {};
        let result = new NodeCalculation();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nodeId"] = this.nodeId;
        if (Array.isArray(this.textWrap)) {
            data["textWrap"] = [];
            for (let item of this.textWrap)
                data["textWrap"].push(item);
        }
        data["size"] = this.size ? this.size.toJSON() : <any>undefined;
        data["nodeType"] = this.nodeType ? this.nodeType.toJSON() : <any>undefined;
        return data;
    }
}

export interface INodeCalculation {
    nodeId: string;
    textWrap: string[];
    size?: Size | undefined;
    nodeType?: NodeType | undefined;
}

/** The size of a node. */
export class Size implements ISize {
    width!: number;
    height!: number;

    constructor(data?: ISize) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.width = _data["width"];
            this.height = _data["height"];
        }
    }

    static fromJS(data: any): Size {
        data = typeof data === 'object' ? data : {};
        let result = new Size();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["width"] = this.width;
        data["height"] = this.height;
        return data;
    }
}

/** The size of a node. */
export interface ISize {
    width: number;
    height: number;
}

export class GraphLayout implements IGraphLayout {
    nodes!: Node[];
    edges!: Edge[];

    constructor(data?: IGraphLayout) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.nodes = [];
            this.edges = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(Node.fromJS(item));
            }
            if (Array.isArray(_data["edges"])) {
                this.edges = [] as any;
                for (let item of _data["edges"])
                    this.edges!.push(Edge.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GraphLayout {
        data = typeof data === 'object' ? data : {};
        let result = new GraphLayout();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        if (Array.isArray(this.edges)) {
            data["edges"] = [];
            for (let item of this.edges)
                data["edges"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGraphLayout {
    nodes: Node[];
    edges: Edge[];
}

export class Node implements INode {
    id!: string;
    text!: string[];
    nodeType!: NodeType;
    position?: Coordinate | undefined;
    size?: Size | undefined;
    rank?: number | undefined;
    nodeInfo?: NodeInfo | undefined;

    constructor(data?: INode) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.text = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["text"])) {
                this.text = [] as any;
                for (let item of _data["text"])
                    this.text!.push(item);
            }
            this.nodeType = _data["nodeType"] ? NodeType.fromJS(_data["nodeType"]) : <any>undefined;
            this.position = _data["position"] ? Coordinate.fromJS(_data["position"]) : <any>undefined;
            this.size = _data["size"] ? Size.fromJS(_data["size"]) : <any>undefined;
            this.rank = _data["rank"];
            this.nodeInfo = _data["nodeInfo"] ? NodeInfo.fromJS(_data["nodeInfo"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Node {
        data = typeof data === 'object' ? data : {};
        let result = new Node();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.text)) {
            data["text"] = [];
            for (let item of this.text)
                data["text"].push(item);
        }
        data["nodeType"] = this.nodeType ? this.nodeType.toJSON() : <any>undefined;
        data["position"] = this.position ? this.position.toJSON() : <any>undefined;
        data["size"] = this.size ? this.size.toJSON() : <any>undefined;
        data["rank"] = this.rank;
        data["nodeInfo"] = this.nodeInfo ? this.nodeInfo.toJSON() : <any>undefined;
        return data;
    }
}

export interface INode {
    id: string;
    text: string[];
    nodeType: NodeType;
    position?: Coordinate | undefined;
    size?: Size | undefined;
    rank?: number | undefined;
    nodeInfo?: NodeInfo | undefined;
}

/** A point in a coordinate system. */
export class Coordinate implements ICoordinate {
    x!: number;
    y!: number;

    constructor(data?: ICoordinate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.x = _data["x"];
            this.y = _data["y"];
        }
    }

    static fromJS(data: any): Coordinate {
        data = typeof data === 'object' ? data : {};
        let result = new Coordinate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["x"] = this.x;
        data["y"] = this.y;
        return data;
    }
}

/** A point in a coordinate system. */
export interface ICoordinate {
    x: number;
    y: number;
}

export class NodeInfo implements INodeInfo {
    frequency!: number;
    namespace?: string | undefined;
    logLevel?: LogLevel | undefined;
    attributes!: { [key: string]: OcelValue; };
    objects!: OcelObject[];

    constructor(data?: INodeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.attributes = {};
            this.objects = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.frequency = _data["frequency"];
            this.namespace = _data["namespace"];
            this.logLevel = _data["logLevel"];
            if (_data["attributes"]) {
                this.attributes = {} as any;
                for (let key in _data["attributes"]) {
                    if (_data["attributes"].hasOwnProperty(key))
                        (<any>this.attributes)![key] = _data["attributes"][key] ? OcelValue.fromJS(_data["attributes"][key]) : <any>undefined;
                }
            }
            if (Array.isArray(_data["objects"])) {
                this.objects = [] as any;
                for (let item of _data["objects"])
                    this.objects!.push(OcelObject.fromJS(item));
            }
        }
    }

    static fromJS(data: any): NodeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new NodeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["frequency"] = this.frequency;
        data["namespace"] = this.namespace;
        data["logLevel"] = this.logLevel;
        if (this.attributes) {
            data["attributes"] = {};
            for (let key in this.attributes) {
                if (this.attributes.hasOwnProperty(key))
                    (<any>data["attributes"])[key] = this.attributes[key] ? this.attributes[key].toJSON() : <any>undefined;
            }
        }
        if (Array.isArray(this.objects)) {
            data["objects"] = [];
            for (let item of this.objects)
                data["objects"].push(item.toJSON());
        }
        return data;
    }
}

export interface INodeInfo {
    frequency: number;
    namespace?: string | undefined;
    logLevel?: LogLevel | undefined;
    attributes: { [key: string]: OcelValue; };
    objects: OcelObject[];
}

export enum LogLevel {
    Verbose = 0,
    Debug = 1,
    Information = 2,
    Warning = 3,
    Error = 4,
    Fatal = 5,
    Unknown = 6,
}

export abstract class OcelValue implements IOcelValue {

    protected _discriminator: string;

    constructor(data?: IOcelValue) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "OcelValue";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): OcelValue {
        data = typeof data === 'object' ? data : {};
        if (data["discriminator"] === "OcelString") {
            let result = new OcelString();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "OcelTimestamp") {
            let result = new OcelTimestamp();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "OcelInteger") {
            let result = new OcelInteger();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "OcelFloat") {
            let result = new OcelFloat();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "OcelBoolean") {
            let result = new OcelBoolean();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "OcelList") {
            let result = new OcelList();
            result.init(data);
            return result;
        }
        if (data["discriminator"] === "OcelMap") {
            let result = new OcelMap();
            result.init(data);
            return result;
        }
        throw new Error("The abstract class 'OcelValue' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discriminator"] = this._discriminator;
        return data;
    }
}

export interface IOcelValue {
}

export class OcelString extends OcelValue implements IOcelString {
    value?: string | undefined;

    constructor(data?: IOcelString) {
        super(data);
        this._discriminator = "OcelString";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"];
        }
    }

    static override fromJS(data: any): OcelString {
        data = typeof data === 'object' ? data : {};
        let result = new OcelString();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data;
    }
}

export interface IOcelString extends IOcelValue {
    value?: string | undefined;
}

export class OcelTimestamp extends OcelValue implements IOcelTimestamp {
    value!: Date;

    constructor(data?: IOcelTimestamp) {
        super(data);
        this._discriminator = "OcelTimestamp";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"] ? new Date(_data["value"].toString()) : <any>undefined;
        }
    }

    static override fromJS(data: any): OcelTimestamp {
        data = typeof data === 'object' ? data : {};
        let result = new OcelTimestamp();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value ? this.value.toISOString() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IOcelTimestamp extends IOcelValue {
    value: Date;
}

export class OcelInteger extends OcelValue implements IOcelInteger {
    value!: number;

    constructor(data?: IOcelInteger) {
        super(data);
        this._discriminator = "OcelInteger";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"];
        }
    }

    static override fromJS(data: any): OcelInteger {
        data = typeof data === 'object' ? data : {};
        let result = new OcelInteger();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data;
    }
}

export interface IOcelInteger extends IOcelValue {
    value: number;
}

export class OcelFloat extends OcelValue implements IOcelFloat {
    value!: number;

    constructor(data?: IOcelFloat) {
        super(data);
        this._discriminator = "OcelFloat";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"];
        }
    }

    static override fromJS(data: any): OcelFloat {
        data = typeof data === 'object' ? data : {};
        let result = new OcelFloat();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data;
    }
}

export interface IOcelFloat extends IOcelValue {
    value: number;
}

export class OcelBoolean extends OcelValue implements IOcelBoolean {
    value!: boolean;

    constructor(data?: IOcelBoolean) {
        super(data);
        this._discriminator = "OcelBoolean";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.value = _data["value"];
        }
    }

    static override fromJS(data: any): OcelBoolean {
        data = typeof data === 'object' ? data : {};
        let result = new OcelBoolean();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        super.toJSON(data);
        return data;
    }
}

export interface IOcelBoolean extends IOcelValue {
    value: boolean;
}

export class OcelList extends OcelValue implements IOcelList {
    values?: OcelValue[] | undefined;

    constructor(data?: IOcelList) {
        super(data);
        this._discriminator = "OcelList";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["values"])) {
                this.values = [] as any;
                for (let item of _data["values"])
                    this.values!.push(OcelValue.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): OcelList {
        data = typeof data === 'object' ? data : {};
        let result = new OcelList();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.values)) {
            data["values"] = [];
            for (let item of this.values)
                data["values"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IOcelList extends IOcelValue {
    values?: OcelValue[] | undefined;
}

export class OcelMap extends OcelValue implements IOcelMap {
    values?: { [key: string]: OcelValue; } | undefined;

    constructor(data?: IOcelMap) {
        super(data);
        this._discriminator = "OcelMap";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (_data["values"]) {
                this.values = {} as any;
                for (let key in _data["values"]) {
                    if (_data["values"].hasOwnProperty(key))
                        (<any>this.values)![key] = _data["values"][key] ? OcelValue.fromJS(_data["values"][key]) : <any>undefined;
                }
            }
        }
    }

    static override fromJS(data: any): OcelMap {
        data = typeof data === 'object' ? data : {};
        let result = new OcelMap();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.values) {
            data["values"] = {};
            for (let key in this.values) {
                if (this.values.hasOwnProperty(key))
                    (<any>data["values"])[key] = this.values[key] ? this.values[key].toJSON() : <any>undefined;
            }
        }
        super.toJSON(data);
        return data;
    }
}

export interface IOcelMap extends IOcelValue {
    values?: { [key: string]: OcelValue; } | undefined;
}

export class OcelObject implements IOcelObject {
    type?: string | undefined;
    ovMap?: { [key: string]: OcelValue; } | undefined;

    constructor(data?: IOcelObject) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            if (_data["ovMap"]) {
                this.ovMap = {} as any;
                for (let key in _data["ovMap"]) {
                    if (_data["ovMap"].hasOwnProperty(key))
                        (<any>this.ovMap)![key] = _data["ovMap"][key] ? OcelValue.fromJS(_data["ovMap"][key]) : <any>undefined;
                }
            }
        }
    }

    static fromJS(data: any): OcelObject {
        data = typeof data === 'object' ? data : {};
        let result = new OcelObject();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        if (this.ovMap) {
            data["ovMap"] = {};
            for (let key in this.ovMap) {
                if (this.ovMap.hasOwnProperty(key))
                    (<any>data["ovMap"])[key] = this.ovMap[key] ? this.ovMap[key].toJSON() : <any>undefined;
            }
        }
        return data;
    }
}

export interface IOcelObject {
    type?: string | undefined;
    ovMap?: { [key: string]: OcelValue; } | undefined;
}

export class Edge implements IEdge {
    sourceId!: string;
    targetId!: string;
    waypoints?: Waypoints | undefined;
    downwards?: boolean | undefined;
    totalWeight!: number;
    typeInfos!: EdgeTypeInfoOfEdgeInfo[];

    constructor(data?: IEdge) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.typeInfos = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sourceId = _data["sourceId"];
            this.targetId = _data["targetId"];
            this.waypoints = _data["waypoints"] ? Waypoints.fromJS(_data["waypoints"]) : <any>undefined;
            this.downwards = _data["downwards"];
            this.totalWeight = _data["totalWeight"];
            if (Array.isArray(_data["typeInfos"])) {
                this.typeInfos = [] as any;
                for (let item of _data["typeInfos"])
                    this.typeInfos!.push(EdgeTypeInfoOfEdgeInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Edge {
        data = typeof data === 'object' ? data : {};
        let result = new Edge();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sourceId"] = this.sourceId;
        data["targetId"] = this.targetId;
        data["waypoints"] = this.waypoints ? this.waypoints.toJSON() : <any>undefined;
        data["downwards"] = this.downwards;
        data["totalWeight"] = this.totalWeight;
        if (Array.isArray(this.typeInfos)) {
            data["typeInfos"] = [];
            for (let item of this.typeInfos)
                data["typeInfos"].push(item.toJSON());
        }
        return data;
    }
}

export interface IEdge {
    sourceId: string;
    targetId: string;
    waypoints?: Waypoints | undefined;
    downwards?: boolean | undefined;
    totalWeight: number;
    typeInfos: EdgeTypeInfoOfEdgeInfo[];
}

export class Waypoints implements IWaypoints {
    coordinates!: Coordinate[];
    catmullRom!: Coordinate[];
    cubicBezier!: TupleOfCoordinateAndCoordinateAndCoordinateAndCoordinate[];
    quadraticBezier!: TupleOfCoordinateAndCoordinateAndCoordinate[];

    constructor(data?: IWaypoints) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.coordinates = [];
            this.catmullRom = [];
            this.cubicBezier = [];
            this.quadraticBezier = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["coordinates"])) {
                this.coordinates = [] as any;
                for (let item of _data["coordinates"])
                    this.coordinates!.push(Coordinate.fromJS(item));
            }
            if (Array.isArray(_data["catmullRom"])) {
                this.catmullRom = [] as any;
                for (let item of _data["catmullRom"])
                    this.catmullRom!.push(Coordinate.fromJS(item));
            }
            if (Array.isArray(_data["cubicBezier"])) {
                this.cubicBezier = [] as any;
                for (let item of _data["cubicBezier"])
                    this.cubicBezier!.push(TupleOfCoordinateAndCoordinateAndCoordinateAndCoordinate.fromJS(item));
            }
            if (Array.isArray(_data["quadraticBezier"])) {
                this.quadraticBezier = [] as any;
                for (let item of _data["quadraticBezier"])
                    this.quadraticBezier!.push(TupleOfCoordinateAndCoordinateAndCoordinate.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Waypoints {
        data = typeof data === 'object' ? data : {};
        let result = new Waypoints();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.coordinates)) {
            data["coordinates"] = [];
            for (let item of this.coordinates)
                data["coordinates"].push(item.toJSON());
        }
        if (Array.isArray(this.catmullRom)) {
            data["catmullRom"] = [];
            for (let item of this.catmullRom)
                data["catmullRom"].push(item.toJSON());
        }
        if (Array.isArray(this.cubicBezier)) {
            data["cubicBezier"] = [];
            for (let item of this.cubicBezier)
                data["cubicBezier"].push(item.toJSON());
        }
        if (Array.isArray(this.quadraticBezier)) {
            data["quadraticBezier"] = [];
            for (let item of this.quadraticBezier)
                data["quadraticBezier"].push(item.toJSON());
        }
        return data;
    }
}

export interface IWaypoints {
    coordinates: Coordinate[];
    catmullRom: Coordinate[];
    cubicBezier: TupleOfCoordinateAndCoordinateAndCoordinateAndCoordinate[];
    quadraticBezier: TupleOfCoordinateAndCoordinateAndCoordinate[];
}

export class TupleOfCoordinateAndCoordinateAndCoordinateAndCoordinate implements ITupleOfCoordinateAndCoordinateAndCoordinateAndCoordinate {
    item1!: Coordinate;
    item2!: Coordinate;
    item3!: Coordinate;
    item4!: Coordinate;

    constructor(data?: ITupleOfCoordinateAndCoordinateAndCoordinateAndCoordinate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.item1 = new Coordinate();
            this.item2 = new Coordinate();
            this.item3 = new Coordinate();
            this.item4 = new Coordinate();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"] ? Coordinate.fromJS(_data["item1"]) : new Coordinate();
            this.item2 = _data["item2"] ? Coordinate.fromJS(_data["item2"]) : new Coordinate();
            this.item3 = _data["item3"] ? Coordinate.fromJS(_data["item3"]) : new Coordinate();
            this.item4 = _data["item4"] ? Coordinate.fromJS(_data["item4"]) : new Coordinate();
        }
    }

    static fromJS(data: any): TupleOfCoordinateAndCoordinateAndCoordinateAndCoordinate {
        data = typeof data === 'object' ? data : {};
        let result = new TupleOfCoordinateAndCoordinateAndCoordinateAndCoordinate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        data["item3"] = this.item3 ? this.item3.toJSON() : <any>undefined;
        data["item4"] = this.item4 ? this.item4.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITupleOfCoordinateAndCoordinateAndCoordinateAndCoordinate {
    item1: Coordinate;
    item2: Coordinate;
    item3: Coordinate;
    item4: Coordinate;
}

export class TupleOfCoordinateAndCoordinateAndCoordinate implements ITupleOfCoordinateAndCoordinateAndCoordinate {
    item1!: Coordinate;
    item2!: Coordinate;
    item3!: Coordinate;

    constructor(data?: ITupleOfCoordinateAndCoordinateAndCoordinate) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.item1 = new Coordinate();
            this.item2 = new Coordinate();
            this.item3 = new Coordinate();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"] ? Coordinate.fromJS(_data["item1"]) : new Coordinate();
            this.item2 = _data["item2"] ? Coordinate.fromJS(_data["item2"]) : new Coordinate();
            this.item3 = _data["item3"] ? Coordinate.fromJS(_data["item3"]) : new Coordinate();
        }
    }

    static fromJS(data: any): TupleOfCoordinateAndCoordinateAndCoordinate {
        data = typeof data === 'object' ? data : {};
        let result = new TupleOfCoordinateAndCoordinateAndCoordinate();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        data["item3"] = this.item3 ? this.item3.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITupleOfCoordinateAndCoordinateAndCoordinate {
    item1: Coordinate;
    item2: Coordinate;
    item3: Coordinate;
}

export class EdgeTypeInfoOfEdgeInfo implements IEdgeTypeInfoOfEdgeInfo {
    weight!: number;
    type?: string | undefined;
    info?: EdgeInfo | undefined;

    constructor(data?: IEdgeTypeInfoOfEdgeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.weight = _data["weight"];
            this.type = _data["type"];
            this.info = _data["info"] ? EdgeInfo.fromJS(_data["info"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EdgeTypeInfoOfEdgeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EdgeTypeInfoOfEdgeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["weight"] = this.weight;
        data["type"] = this.type;
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        return data;
    }
}

export interface IEdgeTypeInfoOfEdgeInfo {
    weight: number;
    type?: string | undefined;
    info?: EdgeInfo | undefined;
}

export class EdgeInfo implements IEdgeInfo {
    durations?: string[] | undefined;

    constructor(data?: IEdgeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["durations"])) {
                this.durations = [] as any;
                for (let item of _data["durations"])
                    this.durations!.push(item);
            }
        }
    }

    static fromJS(data: any): EdgeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EdgeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.durations)) {
            data["durations"] = [];
            for (let item of this.durations)
                data["durations"].push(item);
        }
        return data;
    }
}

export interface IEdgeInfo {
    durations?: string[] | undefined;
}

export class ValueTupleOfDirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfoAndGraphLayoutOptions implements IValueTupleOfDirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfoAndGraphLayoutOptions {
    item1!: DirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfo;
    item2!: GraphLayoutOptions;

    constructor(data?: IValueTupleOfDirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfoAndGraphLayoutOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.item1 = new DirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfo();
            this.item2 = new GraphLayoutOptions();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"] ? DirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfo.fromJS(_data["item1"]) : new DirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfo();
            this.item2 = _data["item2"] ? GraphLayoutOptions.fromJS(_data["item2"]) : new GraphLayoutOptions();
        }
    }

    static fromJS(data: any): ValueTupleOfDirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfoAndGraphLayoutOptions {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfDirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfoAndGraphLayoutOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        return data;
    }
}

export interface IValueTupleOfDirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfoAndGraphLayoutOptions {
    item1: DirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfo;
    item2: GraphLayoutOptions;
}

/** Directed graph with edge information. */
export class DirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfo implements IDirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfo {
    nodes?: NodeOfNodeInfo[] | undefined;
    edges?: TupleOfNodeOfNodeInfoAndNodeOfNodeInfoAndEdgeOfEdgeInfo[] | undefined;

    constructor(data?: IDirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["nodes"])) {
                this.nodes = [] as any;
                for (let item of _data["nodes"])
                    this.nodes!.push(NodeOfNodeInfo.fromJS(item));
            }
            if (Array.isArray(_data["edges"])) {
                this.edges = [] as any;
                for (let item of _data["edges"])
                    this.edges!.push(TupleOfNodeOfNodeInfoAndNodeOfNodeInfoAndEdgeOfEdgeInfo.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new DirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.nodes)) {
            data["nodes"] = [];
            for (let item of this.nodes)
                data["nodes"].push(item.toJSON());
        }
        if (Array.isArray(this.edges)) {
            data["edges"] = [];
            for (let item of this.edges)
                data["edges"].push(item.toJSON());
        }
        return data;
    }
}

/** Directed graph with edge information. */
export interface IDirectedGraphOfNodeOfNodeInfoAndEdgeOfEdgeInfo {
    nodes?: NodeOfNodeInfo[] | undefined;
    edges?: TupleOfNodeOfNodeInfoAndNodeOfNodeInfoAndEdgeOfEdgeInfo[] | undefined;
}

/** A node type that can be a regular event node or a start/end node for a specific type. */
export abstract class NodeOfNodeInfo implements INodeOfNodeInfo {

    constructor(data?: INodeOfNodeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): NodeOfNodeInfo {
        data = typeof data === 'object' ? data : {};
        throw new Error("The abstract class 'NodeOfNodeInfo' cannot be instantiated.");
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

/** A node type that can be a regular event node or a start/end node for a specific type. */
export interface INodeOfNodeInfo {
}

export class TupleOfNodeOfNodeInfoAndNodeOfNodeInfoAndEdgeOfEdgeInfo implements ITupleOfNodeOfNodeInfoAndNodeOfNodeInfoAndEdgeOfEdgeInfo {
    item1!: NodeOfNodeInfo;
    item2!: NodeOfNodeInfo;
    item3!: EdgeOfEdgeInfo;

    constructor(data?: ITupleOfNodeOfNodeInfoAndNodeOfNodeInfoAndEdgeOfEdgeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.item3 = new EdgeOfEdgeInfo();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"] ? NodeOfNodeInfo.fromJS(_data["item1"]) : <any>undefined;
            this.item2 = _data["item2"] ? NodeOfNodeInfo.fromJS(_data["item2"]) : <any>undefined;
            this.item3 = _data["item3"] ? EdgeOfEdgeInfo.fromJS(_data["item3"]) : new EdgeOfEdgeInfo();
        }
    }

    static fromJS(data: any): TupleOfNodeOfNodeInfoAndNodeOfNodeInfoAndEdgeOfEdgeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TupleOfNodeOfNodeInfoAndNodeOfNodeInfoAndEdgeOfEdgeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        data["item3"] = this.item3 ? this.item3.toJSON() : <any>undefined;
        return data;
    }
}

export interface ITupleOfNodeOfNodeInfoAndNodeOfNodeInfoAndEdgeOfEdgeInfo {
    item1: NodeOfNodeInfo;
    item2: NodeOfNodeInfo;
    item3: EdgeOfEdgeInfo;
}

/** An edge is associated with a weight/frequency, and optionally a type, as well as any other arbitrary information. */
export class EdgeOfEdgeInfo implements IEdgeOfEdgeInfo {
    weight!: number;
    type?: FSharpOptionOfString | undefined;
    info?: FSharpOptionOfEdgeInfo | undefined;

    constructor(data?: IEdgeOfEdgeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.weight = _data["weight"];
            this.type = _data["type"] ? FSharpOptionOfString.fromJS(_data["type"]) : <any>undefined;
            this.info = _data["info"] ? FSharpOptionOfEdgeInfo.fromJS(_data["info"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EdgeOfEdgeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EdgeOfEdgeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["weight"] = this.weight;
        data["type"] = this.type ? this.type.toJSON() : <any>undefined;
        data["info"] = this.info ? this.info.toJSON() : <any>undefined;
        return data;
    }
}

/** An edge is associated with a weight/frequency, and optionally a type, as well as any other arbitrary information. */
export interface IEdgeOfEdgeInfo {
    weight: number;
    type?: FSharpOptionOfString | undefined;
    info?: FSharpOptionOfEdgeInfo | undefined;
}

export class FSharpOptionOfString implements IFSharpOptionOfString {

    constructor(data?: IFSharpOptionOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): FSharpOptionOfString {
        data = typeof data === 'object' ? data : {};
        let result = new FSharpOptionOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IFSharpOptionOfString {
}

export class FSharpOptionOfEdgeInfo implements IFSharpOptionOfEdgeInfo {

    constructor(data?: IFSharpOptionOfEdgeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): FSharpOptionOfEdgeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new FSharpOptionOfEdgeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IFSharpOptionOfEdgeInfo {
}

export class GraphLayoutOptions implements IGraphLayoutOptions {
    mergeEdgesOfSameType!: boolean;
    fixUnforeseenEdges!: boolean;
    nodeSeparation!: number;
    rankSeparation!: number;
    edgeSeparation!: number;
    tension!: number;

    constructor(data?: IGraphLayoutOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.mergeEdgesOfSameType = _data["mergeEdgesOfSameType"];
            this.fixUnforeseenEdges = _data["fixUnforeseenEdges"];
            this.nodeSeparation = _data["nodeSeparation"];
            this.rankSeparation = _data["rankSeparation"];
            this.edgeSeparation = _data["edgeSeparation"];
            this.tension = _data["tension"];
        }
    }

    static fromJS(data: any): GraphLayoutOptions {
        data = typeof data === 'object' ? data : {};
        let result = new GraphLayoutOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mergeEdgesOfSameType"] = this.mergeEdgesOfSameType;
        data["fixUnforeseenEdges"] = this.fixUnforeseenEdges;
        data["nodeSeparation"] = this.nodeSeparation;
        data["rankSeparation"] = this.rankSeparation;
        data["edgeSeparation"] = this.edgeSeparation;
        data["tension"] = this.tension;
        return data;
    }
}

export interface IGraphLayoutOptions {
    mergeEdgesOfSameType: boolean;
    fixUnforeseenEdges: boolean;
    nodeSeparation: number;
    rankSeparation: number;
    edgeSeparation: number;
    tension: number;
}

export class OcDfgLayoutOptions implements IOcDfgLayoutOptions {
    ocDfgOptions!: OcDfgOptions;
    layoutOptions!: GraphLayoutOptions;

    constructor(data?: IOcDfgLayoutOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.ocDfgOptions = new OcDfgOptions();
            this.layoutOptions = new GraphLayoutOptions();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.ocDfgOptions = _data["ocDfgOptions"] ? OcDfgOptions.fromJS(_data["ocDfgOptions"]) : new OcDfgOptions();
            this.layoutOptions = _data["layoutOptions"] ? GraphLayoutOptions.fromJS(_data["layoutOptions"]) : new GraphLayoutOptions();
        }
    }

    static fromJS(data: any): OcDfgLayoutOptions {
        data = typeof data === 'object' ? data : {};
        let result = new OcDfgLayoutOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ocDfgOptions"] = this.ocDfgOptions ? this.ocDfgOptions.toJSON() : <any>undefined;
        data["layoutOptions"] = this.layoutOptions ? this.layoutOptions.toJSON() : <any>undefined;
        return data;
    }
}

export interface IOcDfgLayoutOptions {
    ocDfgOptions: OcDfgOptions;
    layoutOptions: GraphLayoutOptions;
}

export class OcDfgOptions implements IOcDfgOptions {
    minimumEvents!: number;
    minimumOccurrence!: number;
    minimumSuccessions!: number;
    dateFrom?: string | undefined;
    dateTo?: string | undefined;
    keepCases!: KeepCases;
    includedTypes!: string[];

    constructor(data?: IOcDfgOptions) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.includedTypes = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.minimumEvents = _data["minimumEvents"];
            this.minimumOccurrence = _data["minimumOccurrence"];
            this.minimumSuccessions = _data["minimumSuccessions"];
            this.dateFrom = _data["dateFrom"];
            this.dateTo = _data["dateTo"];
            this.keepCases = _data["keepCases"];
            if (Array.isArray(_data["includedTypes"])) {
                this.includedTypes = [] as any;
                for (let item of _data["includedTypes"])
                    this.includedTypes!.push(item);
            }
        }
    }

    static fromJS(data: any): OcDfgOptions {
        data = typeof data === 'object' ? data : {};
        let result = new OcDfgOptions();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minimumEvents"] = this.minimumEvents;
        data["minimumOccurrence"] = this.minimumOccurrence;
        data["minimumSuccessions"] = this.minimumSuccessions;
        data["dateFrom"] = this.dateFrom;
        data["dateTo"] = this.dateTo;
        data["keepCases"] = this.keepCases;
        if (Array.isArray(this.includedTypes)) {
            data["includedTypes"] = [];
            for (let item of this.includedTypes)
                data["includedTypes"].push(item);
        }
        return data;
    }
}

export interface IOcDfgOptions {
    minimumEvents: number;
    minimumOccurrence: number;
    minimumSuccessions: number;
    dateFrom?: string | undefined;
    dateTo?: string | undefined;
    keepCases: KeepCases;
    includedTypes: string[];
}

export enum KeepCases {
    ContainedInTimeFrame = "contained",
    IntersectingTimeFrame = "intersecting",
    StartedInTimeFrame = "started",
    CompletedInTimeFrame = "completed",
    TrimToTimeFrame = "trim",
}

export class ValueTupleOfOcelObjectAndIEnumerableOfValueTupleOfStringAndOcelEvent implements IValueTupleOfOcelObjectAndIEnumerableOfValueTupleOfStringAndOcelEvent {
    item1!: OcelObject;
    item2!: ValueTupleOfStringAndOcelEvent[];

    constructor(data?: IValueTupleOfOcelObjectAndIEnumerableOfValueTupleOfStringAndOcelEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.item1 = new OcelObject();
            this.item2 = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"] ? OcelObject.fromJS(_data["item1"]) : new OcelObject();
            if (Array.isArray(_data["item2"])) {
                this.item2 = [] as any;
                for (let item of _data["item2"])
                    this.item2!.push(ValueTupleOfStringAndOcelEvent.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ValueTupleOfOcelObjectAndIEnumerableOfValueTupleOfStringAndOcelEvent {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfOcelObjectAndIEnumerableOfValueTupleOfStringAndOcelEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1 ? this.item1.toJSON() : <any>undefined;
        if (Array.isArray(this.item2)) {
            data["item2"] = [];
            for (let item of this.item2)
                data["item2"].push(item.toJSON());
        }
        return data;
    }
}

export interface IValueTupleOfOcelObjectAndIEnumerableOfValueTupleOfStringAndOcelEvent {
    item1: OcelObject;
    item2: ValueTupleOfStringAndOcelEvent[];
}

export class ValueTupleOfStringAndOcelEvent implements IValueTupleOfStringAndOcelEvent {
    item1!: string;
    item2!: OcelEvent;

    constructor(data?: IValueTupleOfStringAndOcelEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.item2 = new OcelEvent();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.item1 = _data["item1"];
            this.item2 = _data["item2"] ? OcelEvent.fromJS(_data["item2"]) : new OcelEvent();
        }
    }

    static fromJS(data: any): ValueTupleOfStringAndOcelEvent {
        data = typeof data === 'object' ? data : {};
        let result = new ValueTupleOfStringAndOcelEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["item1"] = this.item1;
        data["item2"] = this.item2 ? this.item2.toJSON() : <any>undefined;
        return data;
    }
}

export interface IValueTupleOfStringAndOcelEvent {
    item1: string;
    item2: OcelEvent;
}

export class OcelEvent implements IOcelEvent {
    activity!: string;
    timestamp!: Date;
    oMap!: { [key: string]: OcelObject; };
    vMap!: { [key: string]: OcelValue; };

    constructor(data?: IOcelEvent) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.oMap = {};
            this.vMap = {};
        }
    }

    init(_data?: any) {
        if (_data) {
            this.activity = _data["activity"];
            this.timestamp = _data["timestamp"] ? new Date(_data["timestamp"].toString()) : <any>undefined;
            if (_data["oMap"]) {
                this.oMap = {} as any;
                for (let key in _data["oMap"]) {
                    if (_data["oMap"].hasOwnProperty(key))
                        (<any>this.oMap)![key] = _data["oMap"][key] ? OcelObject.fromJS(_data["oMap"][key]) : new OcelObject();
                }
            }
            if (_data["vMap"]) {
                this.vMap = {} as any;
                for (let key in _data["vMap"]) {
                    if (_data["vMap"].hasOwnProperty(key))
                        (<any>this.vMap)![key] = _data["vMap"][key] ? OcelValue.fromJS(_data["vMap"][key]) : <any>undefined;
                }
            }
        }
    }

    static fromJS(data: any): OcelEvent {
        data = typeof data === 'object' ? data : {};
        let result = new OcelEvent();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activity"] = this.activity;
        data["timestamp"] = this.timestamp ? this.timestamp.toISOString() : <any>undefined;
        if (this.oMap) {
            data["oMap"] = {};
            for (let key in this.oMap) {
                if (this.oMap.hasOwnProperty(key))
                    (<any>data["oMap"])[key] = this.oMap[key] ? this.oMap[key].toJSON() : <any>undefined;
            }
        }
        if (this.vMap) {
            data["vMap"] = {};
            for (let key in this.vMap) {
                if (this.vMap.hasOwnProperty(key))
                    (<any>data["vMap"])[key] = this.vMap[key] ? this.vMap[key].toJSON() : <any>undefined;
            }
        }
        return data;
    }
}

export interface IOcelEvent {
    activity: string;
    timestamp: Date;
    oMap: { [key: string]: OcelObject; };
    vMap: { [key: string]: OcelValue; };
}

export class ListTreeOfString implements IListTreeOfString {

    constructor(data?: IListTreeOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ListTreeOfString {
        data = typeof data === 'object' ? data : {};
        let result = new ListTreeOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IListTreeOfString {
}

export class ObjectInfo implements IObjectInfo {
    id!: string;
    uniqueInstances!: number;
    referencingEvents!: number;
    objectOccurrences!: ObjectOccurrence[];

    constructor(data?: IObjectInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.objectOccurrences = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.uniqueInstances = _data["uniqueInstances"];
            this.referencingEvents = _data["referencingEvents"];
            if (Array.isArray(_data["objectOccurrences"])) {
                this.objectOccurrences = [] as any;
                for (let item of _data["objectOccurrences"])
                    this.objectOccurrences!.push(ObjectOccurrence.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ObjectInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["uniqueInstances"] = this.uniqueInstances;
        data["referencingEvents"] = this.referencingEvents;
        if (Array.isArray(this.objectOccurrences)) {
            data["objectOccurrences"] = [];
            for (let item of this.objectOccurrences)
                data["objectOccurrences"].push(item.toJSON());
        }
        return data;
    }
}

export interface IObjectInfo {
    id: string;
    uniqueInstances: number;
    referencingEvents: number;
    objectOccurrences: ObjectOccurrence[];
}

export class ObjectOccurrence implements IObjectOccurrence {
    activity!: string;
    namespace?: string | undefined;
    sourceFile?: string | undefined;
    lineNumber?: number | undefined;
    codeSnippet?: string | undefined;

    constructor(data?: IObjectOccurrence) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.activity = _data["activity"];
            this.namespace = _data["namespace"];
            this.sourceFile = _data["sourceFile"];
            this.lineNumber = _data["lineNumber"];
            this.codeSnippet = _data["codeSnippet"];
        }
    }

    static fromJS(data: any): ObjectOccurrence {
        data = typeof data === 'object' ? data : {};
        let result = new ObjectOccurrence();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["activity"] = this.activity;
        data["namespace"] = this.namespace;
        data["sourceFile"] = this.sourceFile;
        data["lineNumber"] = this.lineNumber;
        data["codeSnippet"] = this.codeSnippet;
        return data;
    }
}

export interface IObjectOccurrence {
    activity: string;
    namespace?: string | undefined;
    sourceFile?: string | undefined;
    lineNumber?: number | undefined;
    codeSnippet?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class SwaggerException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isSwaggerException = true;

    static isSwaggerException(obj: any): obj is SwaggerException {
        return obj.isSwaggerException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new SwaggerException(message, status, response, headers, null);
}